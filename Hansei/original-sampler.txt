let shallow_explore maxdepth (choices:ProbabilitySpace<_> ) =
    let add_answer pcontrib v mp = insertWith (+) v pcontrib mp 
    let rec loop pc depth ans acc = function
    | [] -> (ans,acc)
    | (p,Value v)::rest -> loop pc depth (add_answer (p * pc) v ans) acc rest
    | c::rest when depth >= maxdepth -> loop pc depth ans (c::acc) rest
    | (p,Continued (Lazy t))::rest -> 
      let (ans,ch) = loop (pc * p) (depth + 1) ans [] (t) 
      let ptotal = List.fold (fun pa (p,_) -> pa + p) 0.0 ch 
      let acc =
        if ptotal = 0.0 then acc
        else if ptotal < nearly_one then
             (p * ptotal, 
              let ch = List.map (fun (p,x) -> (p / ptotal,x)) ch          
              Continued (lazy ch))::acc
            else (p, Continued (lazy ch))::acc 
      loop pc depth ans acc rest
    
    let (ans,susp) = loop 1.0 0 Map.empty [] choices
    Map.fold (fun a v p -> (p,Value v)::a) susp ans : ProbabilitySpace<_>


let sample_dist0 maxdepth (selector) (sample_runner) (ch:ProbabilitySpace<_>) =
    let look_ahead pcontrib (ans,acc) = function (* explore the branch a bit *)
    | (p,Value v) -> (insertWith(+) v (p * pcontrib) ans, acc)
    | (p,Continued (Lazy t)) -> 
        match (t)  with
        | [] -> (ans,(acc:(float * ProbabilitySpace<_>) list))
        | [(p1,Value v)] -> 
           (insertWith (+) v (p * p1 * pcontrib) ans, acc)
        | ch ->
            let ptotal = List.fold (fun pa (p,_) -> pa + p) 0.0 ch 
            (ans,
              if ptotal < nearly_one then
                (p * ptotal, List.map (fun (p,x) -> (p / ptotal,x)) ch)::acc 
              else (p, ch)::acc)        
    let rec loop depth pcontrib ans = function
    | [(p,Value v)]  -> insertWith (+) v (p * pcontrib) ans
    | []         -> ans
    | [(p,Continued (Lazy th))] -> loop (depth+1) (p * pcontrib) ans (th)
    | ch when depth < maxdepth -> (* choosing one thread randomly *)    
        match List.fold (look_ahead pcontrib) (ans,[]) ch with
        | (ans,[]) -> ans
        | (ans,cch) ->
           let (ptotal,th:ProbabilitySpace<_>) = selector cch 
           loop (depth+1) (pcontrib * ptotal) ans th  
    | _ -> ans    
    let toploop pcontrib ans cch = (* cch are already pre-explored *)
        let (ptotal,th) = selector cch 
        loop 0 (pcontrib * ptotal) ans th 
    let driver pcontrib vals cch =
        let (ans,nsamples) = 
             sample_runner Map.empty (fun ans -> toploop pcontrib ans cch)  
        let ns = float nsamples  
        let ans = Map.fold (fun ans v p  -> insertWith (+) v (ns * p) ans) ans vals 
        printfn "sample_importance: done %d worlds\n" nsamples;
        Map.fold (fun a v p -> (p / ns,Value v)::a) [] ans       
    let rec make_threads depth pcontrib ans ch =  (* pre-explore initial threads *)
        match List.fold (look_ahead pcontrib) (ans,[]) ch with
        | (ans,[]) -> (* pre-exploration solved the problem *)
          Map.fold (fun a v p -> (p,Value v)::a) [] ans
        | (ans,[(p,ch)]) when depth < maxdepth -> (* only one choice, make more *)
           make_threads (depth+1) (pcontrib * p) ans ch
          (* List.rev is for literal compatibility with an earlier version *)
        | (ans,cch) -> driver pcontrib ans (List.rev cch) 
    make_threads 0 1.0 Map.empty ch : ProbabilitySpace<_> 

let inline sample_parallel shallowmaxdepth n maxdepth maxtime nsamples (distr) : ProbabilitySpace<_> =
    Array.Parallel.map 
        (fun _ -> 
        sample_importanceN random_selector maxtime shallowmaxdepth maxdepth 
            (nsamples / n) distr) [| 1..n |]
    |> List.concat
    |> List.groupBy snd
    |> List.map (fun (v, ps) -> List.averageBy fst ps, v)

//////////////////////

Store samplers here.

module Samplers =
    let rec sample_beta n a b = 
        if n <= 0 then  (round 2 (a/(a+b)))
        else let i = Stats.discreteSample [|a/(a+b);b/(a+b)|]
             if i = 0 then sample_beta (n - 1) (a+1.) b
             else sample_beta (n-1) a (b+1.)

    let sample_poisson lambda = 
        let p = exp -lambda
        let u = random.NextDouble()
        let rec loop s p x =
            if u <= s then x 
            else let x' = x + 1.
                 let p' = p * lambda/x'
                 loop (s+p') p' x'
        loop p p 0.

    let rec sample_std_normal () =
      let u = max Double.Epsilon (random.NextDouble())
      let v = max Double.Epsilon (random.NextDouble())

      sqrt (-2. * log u)  * cos(2. * pi * v) 

    let sample_std_lognormal = sample_std_normal >> exp

    let sample_normal mean stdev = mean + sample_std_normal() * stdev

    let sample_lognormal mu scale = exp(mu + sample_std_normal() * scale)
  
    let sample_gamma a = 
        let d = a - 1./3. 
        let c = 1./(sqrt 9. * d)
        let rec loop () = 
            let z = sample_std_normal() 
            let u = random.NextDouble()
            let v = (1. + c * z) ** 3.
            let dv = d * v
            if z > -1./c && log u < 0.5 * z**2. + d - dv + d * log v then round 1 dv 
            else loop()
        loop () 
    
    let sample_exponential roundto lambda = 
        let u = random.NextDouble()
        round roundto ((-log u)/lambda) 

////////////////

////////////////////////////////////// 
//let insertWith fn key item m =
//    let v' = Map.tryPick (fun k' v' -> if key = k' then Some v' else None) m
//    match v' with
//    | Some v' -> Map.add key (fn item v') m
//    | None -> Map.add key item m 





    ////This sampler takes after beam search or even breadth first search
    ////when the width is high enough.
    //let inline best_first_sample_dist (maxtime : _ option) prevtabu 
    //    zero one tofloat maxwidth maxdepthval width lookaheadWidth 
    //    maxTemperature niters space =

    //    let t0 = System.DateTime.Now
    //    let paths = defaultArg prevtabu (Dict<int32 list, float>())
    //    let maxbeamdepth = int (log maxwidth / log (float width))
    //    let gainT = maxTemperature ** (1./200.)
    //    let gainLiteT = maxTemperature ** (1./300.)
    //    let attenT = maxTemperature ** (-1./10.)
    //    let useTemperature = maxTemperature > 1. 
    //    let mutable T = 1.
    //    let maxdepth = if maxdepthval % 2 = 0 then maxdepthval + 1 else maxdepthval  
    //    let discreteSampler ps =  
    //        Stats.discreteSample (Array.normalize [|for (p,w,_) in ps -> (tofloat p * w) ** (1./T)|])
    //    let empty = Dict()
    //    let fch curpath ch =
    //        ch
    //        |> List.mapi (fun i (p, t) ->
    //                let pass, w = testPath paths (i :: curpath)
    //                if pass then zero, 0., t
    //                else p, w, t)
    //    let rec loop (curpath : int32 list) maxd depth lookahead pcontrib ans =
    //        function
    //        | [] -> //FIX PRP{AGATE
    //            propagateUp 1. false paths 0.5 -0.1 curpath
    //            paths.ExpandElseAdd curpath (fun _ -> -1.) -1.
    //            if useTemperature then T <- min maxTemperature (T * gainT)
    //            empty  
    //        | ([ p, Value v ] : GenericProbabilitySpace<'W, 'T>) ->
    //            propagateUp  1. true paths 0.5 0.1 curpath
    //            paths.ExpandElseAdd curpath (fun _ -> -1.) -1.
    //            if useTemperature then T <- max 1. (T * attenT)
    //            Utils.insertWithx (+) v (p * pcontrib) ans
    //        | _ when depth > maxdepth
    //                    || (maxtime.IsSome
    //                        && (DateTime.Now - t0).TotalSeconds > maxtime.Value) -> 
    //            if lookahead then
    //                propagateUp 1. false paths 0.5 -0.01 curpath
    //            if useTemperature then T <- min maxTemperature (T * gainLiteT)
    //            empty
    //        | [ p, Continued(Lazy th) ] ->
    //            if lookahead then
    //                propagateUp 1. true paths 0.5 -0.01 curpath
    //                empty
    //            else loop curpath maxd (depth + 1) false (p * pcontrib) ans th
    //        | ch when not lookahead ->              
    //            let bwidth =
    //                if depth > maxbeamdepth then 1
    //                else width 
              
    //            let widths, lookahead, steps = 
    //                if lookaheadWidth = 0 then [|bwidth|], [|false|], 0
    //                else
    //                    [|lookaheadWidth;bwidth|], [|true; false|], 1

    //            let selected =
    //                [ for i in 0..steps do 
    //                    let choices =
    //                        sampleN_No_ReplacementsX discreteSampler widths.[i] (fch curpath ch)
    //                    yield! [ for (b, (p, _, t)) in choices do
    //                                if p <> zero then
    //                                    yield loop (b :: curpath) maxd (depth + 1)
    //                                            lookahead.[i] (pcontrib) ans [ p, t ] ] ]

    //            for samples in selected do
    //                ans.MergeWith (fun _ t -> t) (Seq.toArray samples) 
    //            ans
    //        | _ -> empty

    //    let rec sampler (ch : GenericProbabilitySpace<'W, 'T>) ans =
    //        function
    //        | 0 ->
    //            let t1 = System.DateTime.Now
    //            printfn "done %d worlds\nTime taken: %A seconds" niters
    //                (round 3 ((t1 - t0).TotalSeconds))
    //            { Values = 
    //                [ for (KeyValue(v, p:'W)) in ans -> p, Value v ]; 
    //              Continuation = ch; 
    //              Paths = paths}
    //        | n ->
    //            let ans = loop [] maxdepth 0 false one ans ch
    //            sampler ch ans (n - 1)  

    //    sampler (reify0 one space) (Dict()) niters 
    
    (* ------------------------------------------------------------------------ *)
    (*	Approximate inference strategies:				    *)
    (*  Trace a few paths from the root to a leaf of the search tree            *)
    (* The following procedures are non-deterministic; they use a given selector*)
    (* procedure, of the type 'selector', to chose among the alternatives.      *)
    (* For top-level inference, the selector uses system random generator.      *)

    (* Naive, rejection sampling: the baseline *)        
    (* Random selection from a list of choices, using system randomness *)
    //let inline random_selector tofloat zero =  
    //    let rec selection r ptotal pcum = function
    //        | [] -> failwith "Choice selection: can't happen"
    //        | ((p,th)::rest) -> 
    //        let pcum = pcum + p  
    //        if r < tofloat pcum then (ptotal,th)
    //        else selection r ptotal pcum rest  
    //    fun choices ->
    //        let ptotal = List.sumBy fst choices  
    //        let r = random.NextDouble (0., tofloat ptotal)      (* 0<=r<ptotal *)
    //        selection r ptotal zero choices 
    
    //let inline rejection_sample_dist one fromInt selector nsamples ch : GenericProbabilitySpace<_, _> =
    //    let t0 = System.DateTime.Now
    //    let rec loop pcontrib ans = function
    //        | [(p,Value v)]  -> insertWithx (+) v (p * pcontrib) ans
    //        | []         -> ans
    //        | [(p,Continued (Lazy th))] -> loop (p * pcontrib) ans (th)
    //        | ch ->
    //            let (ptotal,th) = selector ch
    //            loop (pcontrib * ptotal) ans [(one,th)]
    //    let rec driver ch ans = function
    //        | 0 -> let ns = fromInt nsamples
    //               let t1 = System.DateTime.Now
    //               printfn "rejection_sample: done %d worlds\nTime taken: %A seconds"
    //                        nsamples (round 3 ((t1 - t0).TotalSeconds))
    //               [for KeyValue(v,p) in ans -> p / ns, Value v] 
    //        | n -> driver ch (loop one ans ch) (n-1)
    //    driver (reify0 one ch) (Dict()) nsamples 

         
    //type ModelFrom<'w, 'a, 'b>
    //    (reify0, explore : int option -> GenericProbabilitySpace<'w,'a> -> GenericProbabilitySpace<_,_>, 
    //        thunk : ('a -> GenericProbabilitySpace<'w, 'a>) -> GenericProbabilitySpace<'w,'b>, 
    //        ?rejection_sampler) =
    //    let exact_reify model = explore None (reify0 model)
    //    let limit_reify n model = explore (Some n) (reify0 model)
    //    member __.model = thunk 
    //    member __.RejectionSampler(nsamples:int) =
    //        match rejection_sampler with
    //        | None -> failwith "No sampler"
    //        | Some sampler ->
    //            sampler nsamples thunk: GenericProbabilitySpace<'w,'b> 

    //    member __.Reify(?limit:int) =
    //        match limit with
    //        | None -> exact_reify thunk : GenericProbabilitySpace<'w,'b>
    //        | Some n -> limit_reify n thunk  
        